datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int       @id @default(autoincrement())
  auth0Id     String    @unique
  email       String    @unique
  fullName    String?
  firstName   String?
  lastName    String?
  nickname    String?
  picture     String?
  accessToken String?
  isVerified  Boolean   @default(true)
  lastLogin   DateTime?

  role        UserRole  @default(PARTNER_USER)

  // Optional relation to the bank the user belongs to
  bankId      Int?
  bank        Bank?     @relation("BankUsers", fields: [bankId], references: [id])

  // Banks and Agreements created by this user
  banksCreated      Bank[]      @relation("BanksCreatedBy")
  agreementsCreated Agreement[] @relation("AgreementsCreatedBy")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Bank {
  id                 Int       @id @default(autoincrement())
  name               String
  registrationNumber String?   @unique
  taxId              String?   @unique
  contactEmail       String
  phone              String?
  address            String?
  city               String?
  state              String?
  country            String?
  postalCode         String?
  bankType           BankType  @default(MICROFINANCE)
  ceoName            String?
  ceoEmail           String?
  ctoName            String?
  ctoEmail           String?
  licenseNumber      String?
  branchCount        Int?      @default(0)
  isKYCCompliant     Boolean   @default(false)
  isAMLCompliant     Boolean   @default(false)
  supportedCurrencies Json?
  swiftCode          String?
  notes              String?

  // Relations
  users       User[]      @relation("BankUsers")          // Users that belong to this bank
  agreements  Agreement[] @relation("BankAgreements")     // Agreements linked to this bank

  createdById Int @default(1)
  createdBy   User @relation("BanksCreatedBy", fields: [createdById], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Agreement {
  id              Int       @id @default(autoincrement())
  title           String
  description     String?
  agreementDate   DateTime
  expiryDate      DateTime?
  status          AgreementStatus
  agreementType   AgreementType
  digitalSignature String?
  pdfFilePath     String?

  // Relation to User (who created it)
  createdById Int
  createdBy   User @relation("AgreementsCreatedBy", fields: [createdById], references: [id])

  // Relation to Bank
  bankId Int?
  bank   Bank? @relation("BankAgreements", fields: [bankId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum UserRole {
  ADMIN
  PARTNER_USER
}

enum BankType {
  COMMERCIAL
  MICROFINANCE
  COOPERATIVE
  INVESTMENT
  DEVELOPMENT
  CENTRAL
  SWIFT
  OTHER
}

enum AgreementStatus {
  PENDING
  ACTIVE
  REJECTED
  EXPIRED
}

enum AgreementType {
  LOAN
  PARTNERSHIP
  SERVICE
  NDA
  OTHER
}
